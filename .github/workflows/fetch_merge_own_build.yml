name: Build Check after merge with own_build keyboard
on:
  # 手動実行
  workflow_dispatch:
  # 周期実行(日本時間の月曜0時に動作)
  schedule:
    # Cron format:
    #         ┌───────────── minute (0 - 59)
    #         │ ┌───────────── hour (0 - 23)
    #         │ │ ┌───────────── day of the month (1 - 31)
    #         │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #         │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #         │ │ │ │ │
    #         * * * * *
    - cron:  '0 15 * * 0'

jobs:
  # 最新マージ→makeチェック→push処理
  merge_check_push:
    runs-on: ubuntu-latest
    container:
      # QMKのコンテナでビルド
      image: docker://qmkfm/base_container:latest
    env:
      NAME: 4rkb1rd
      EMAIL: marksard@rocketmail.com
      REPO_FORK: https://github.com/qmk/qmk_firmware.git
      # SlackのフックURLをsecretに登録が必要
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
    # QMKリポジトリと使用するブランチを選択
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: marksard/qmk_firmware
        ref: own_build
        submodules: true
        # Personal Access Token設定とsecret登録が必要
        token: ${{ secrets.ACCESS_TOKEN }}

    # マージ作業
    - name: Merge
      run: |
       git config --global --add safe.directory /__w/qmk_firmware_hex/qmk_firmware_hex
        git config --global user.name ${NAME}
        git config --global user.email ${EMAIL}
        git config --global pull.rebase merges
        git pull --unshallow  # this option is very important, you would get
                              # complains about unrelated histories without it.
                              # (but actions/checkout@v2 can also be instructed
                              # to fetch all git depth right from the start)
        git remote add upstream ${REPO_FORK}        
        git fetch upstream
        git merge --no-edit upstream/master

    # 指定したブランチに入れてあるmakeスクリプトで各キーボードのファームウェアをビルド
    - name: Make completion test
      run: |
        # qmkのセットアップがqmk dockerイメージ側で作成されなくなっている
        python3 -m pip install qmk
        chmod +x ./_release_own_build.sh
        ./_release_own_build.sh -via

    # 指定したブランチに入れてあるファイルサイズチェック用スクリプトを起動
    - name: Hex file size check
      shell: bash
      run: |
        check_result=$(./_release_own_build.sh -hexcheck)
        # envに結果文字列を登録して通知時に使用する（複数行の文字列を格納するハック）
        echo "check_result<<EOF" >> $GITHUB_ENV
        echo "$check_result" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # makeスクリプトでエラーがでなければpush
    - name: Push
      run: |
        git push origin own_build

    # Slackへの通知
    - name: Slack Notification on Success
      if: success()
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_TITLE: Merge Success
        SLACK_COLOR: good
        SLACK_MESSAGE: "Merge check has been succeeded.\n${{ env.check_result }}"
    - name: Slack Notification on Failure
      uses: rtCamp/action-slack-notify@v2.0.2
      if: failure()
      env:
        SLACK_TITLE: Test Failure
        SLACK_COLOR: danger
        SLACK_MESSAGE: ":fire: Merge check has been failed. :fire:.\n${{ env.check_result }}"
